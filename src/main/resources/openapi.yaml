openapi: 3.0.1
info:
  title: Driver and Team API
  version: "1.0"
servers:
  - url: http://localhost:8080/api
paths:
  /driver/all:
    get:
      summary: Retrieve all drivers
      responses:
        200:
          description: Returns a JSON Array of all drivers in the database.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Driver'
  /driver/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Returns a specific driver by their assigned ID
      responses:
        200:
          description: Driver with a specific ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
    put:
      summary: Updates a specific driver by their specific ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Driver'
      responses:
        200:
          description: The updated driver, all fields can be updated except for the ID field
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
    delete:
      summary: Delete a driver by their assigned ID
      responses:
        200:
          description: The driver with the assigned ID will be deleted if they exist.
  /driver/:
    post:
      summary: Create a new Driver
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Driver'
      responses:
        201:
          description: New driver to be created, all fields can be assigned manually except for ID, ID is assigned by the database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
  /team/all:
    get:
      summary: Retrieve all teams
      responses:
        200:
          description: Returns a JSON Array of all teams in the database
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
  /team/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
    get:
      summary: Get a team by ID
      responses:
        200:
          description: Returns Team with the given ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    put:
      summary: Update a team by ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        200:
          description: Updates a team with the given ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
    delete:
      summary: Delete a team by ID
      responses:
        200:
          description: Deletes the team with the ID if it exists
  /team/:
    post:
      summary: Create a new team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Team'
      responses:
        201:
          description: New team created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
components:
  schemas:
    Driver:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        country:
          type: string
        teamId:
          type: string
    Team:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        country:
          type: string